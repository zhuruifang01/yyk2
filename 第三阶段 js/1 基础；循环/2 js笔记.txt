一：
  alert(111);   //弹出框
  console.log(111); //在控制台中输出内容
  prompt("姓名:",""); //弹出一个可输入框

  document.write("aaa") //页面中写入内容
二：
  引入方式：
   （1）head中直接写样式：<script> 
                          </script>  //标签对(嵌入式)
   （2）<script src="1.js"> </script>       //外部引入
         或<link rel="stylesheet" href="1.js">
   （3）//重定向：form action="javascript:     "

       例如：
       超链接：
       <a href="javascript:alert('我是超链接')">***</a>
       或重定向：
       <form action="javascript:alert('我是超链接')" method="get">
        <input type="text">
        <input type="submit">
      </form>
   （4）onclick="alert(111)"  //点击事件
      
      例如：
      <div style="width:100px;height:100px;background:red;" onclick="alert(111)">
      </div>
三：
   1、script标签不能嵌套；
   2、script标签引入外部的.js时 就不要再添加其余代码；
   3、注释：//        表示单行注释
            /* */     也可注释多行
==========================================================================================================
一：
变量：（可以改变的数据）
       把数据保存起来的一个容器，这个容器里面的数据随时可以更换。
2.内存:栈区，堆区，代码块，静态区;
3.  关键字：(1)var a; (创建对象)        var b;    【先声明】
             a=1;                     b='a';  b='aaa';【后赋值】

          (2)var b=1; 【声明并赋值】
          (3)  var c,d,e;    【同时声明多个】
               c=1; d=1; e=1;  【后赋值】

          (4)var c=1,d=1,e=1; 【同时声明多个并赋值】
         
          a=1;直接赋值而没有声明[则表示全局变量]
 二：
   命名规范：
    1.区分大小写；
    2.开头：字母，下划线，$符号；
      后面：数字，字母，下划线，$；
    3.不能用关键字、保留字命名；
    4.自己命名习惯：
     （1） 驼峰命名法：大小写夹杂  getElaseById
      (2)  首字母大写（常用于对象，函数）
     （3） 下划线 logo_left_title
    5.命名一定要有意义；
    6.每个语句后面记得加分号；
 三：
 1、数据类型：
      初始类型：
      类型     取值
      number    1      2       1.2     【栈】
      string   'c'  'woaini'   '1'     【堆】
      boolean   true  false            【栈】
      undefined  undefined(未赋值)     【栈】
      null       null(空对象)(占位符)  【栈】 [object]
      引用类型： 
      Object 对象  
  3.数据类型:(1)初始类型: （number,string,boolean,undefined, null）   
          typeof检测结果: "number",                       ,"object"

            (2)复杂类型：object,    function ,    array, json(节省格式)
             typeof结果: "object", "function",  "object","object"                                 
   
   2、\n 换行  <br/>
      \b 空格
=========================================================
运算符：
一：算术运算符；
  + - * / % ++ --
  (1)a++ ++a  自增运算符
     a++；    先使用，后+1
     ++a；    先加1，后使用
  (2)十进制 二进制 八进制 十六进制

二：关系运算符：
  < > <= >=     !=  ==     ===  !==
   结果是:true 或 false
   
ASCII表:a 97 ;A 65；0 是48；
   3=="3"  【true】
   3==="3" 【false】
   undefined==null【true】
   true为1，false为0；
三：赋值运算符：
    = += -= *= /= %=

    a+=2;  //a=a+2;
    a*=2;  //a=a*2;
    a/=2;  //a=a/2;
四：逻辑运算符：
    && 与  
    || 或 
    !非

  （1）【||：返回真的变量 的值】
       【||：若均为假，返回最后一个假 的值】

  （2） 短路原则：||的时候，若左边是true，则右边不会执行；若均为假，返回最后一个假 的值
              &&的时候，若左边是false,则右边不再执行； 

（3）0是false,其余正负数都是true;
    undefined 是false;
    null是false;
    字符串除了空串，其余都是true;
    对象 是 true;
五：一元运算符：（只操作一个元素）
    typeof + - delete new ++ -- ！
六：三元运算符：
    var c= a>b? b :a
七：特殊运算符：
    1、括号的作用（）:
        第一：函数调用，函数声明；
        第二：优先运算；

    2、逗号,
        用来声明多个变量；
    3、typeof 返回数据的 数据类型
================================================================
三大流程控制：
  1、顺序结构
     从上到下，一行行的解释执行；
  2、（1）分支结构（选择结构）
     有选择的执行某一行语句
     if() {  }  

     if(){}    双路分支
        else{}

     if(){} 多路分支
      else if(){}
       else{}

     （2）switch case
      var a = prompt();
      switch(a) 
      {case "1":表达式1; break;
       case "2":表达式2; break;
       case "3":表达式3; break;
       default:默认(出错处理);
      }
【注：当判断条件是多个时用if,是单个时用switch;】
  
 3、循环结构:重复执行同一个代码块。
    (1) for(初始值;终止条件;步进值)    【知道循环次数时用for循环】
        {循环体}
     
    (2)while(终止条件){}
         【满足条件执行】
    (3)do{}                【至少执行一次】
       while(终止条件)

    (4)break;跳出循环
       continue;跳出本次循环，执行下次循环

    **标签语句：可以跳出多层循环。
       用法：在要跳出的循环外使用out
       例：
       out:
           for(var i=0;i<5;i++){
            for(var j=0;j<5;j++){
             if(j==2){
             break out;
             }
             document.write(j+"<br/>");
           }
           
      }
        document.write("<br/>");





  