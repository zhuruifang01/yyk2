正则：匹配字符串。
  
一：表达式：
 1.构造函数：
    var reg=new RegExp("正则表达式","模式修正符");
 2.字面量方式：
   var reg=/ /模式修正符;  （/ /为定界符）

   var reg=/[avc]/;  //匹配a或v或c
   var reg=/avc/;  //匹配字符串avc

二：方法：
  1.reg.test(str);
    //检测是否可匹配到（返回true / false）
  2.reg.exec(str);  //检测匹配（返回数组 / null）

 方法:字符串中可用于正则的方法：
   1. str.replace(正则或字符串，替换内容);  //替换
   2. str.search(正则或字符串); //匹配第一次出现的(返回下标)|找不到返回-1
   3. str.split(正则或字符串); //拆分字符串
   4. str.match(reg);  //有g时，可以全部找见，不用重复调用 | 找不见时返回null
三：模式修正符：
    i 不区分大小写字母;
    m 将字符串视为多行，用来修饰^和$;
    g 全局匹配,找到所有匹配项【从上一个基础上向下匹配】
四：原子：
  \s      任意一个空白字符匹配
  \S  与除了空白字符外任意一个字符匹配
  \d  匹配任意一个数字 [0-9]
  \D  匹配除数字以外的任何字符 [^0-9] 
  \w      英文字母，数字,下划线匹配 [a-z0-9A-Z]
  \W  除了英文字母，数字,下划线     [^a-z0-9A-Z]

   原子表：
    []   
    [^]
    [a-z]
    [A-Z]
    [0-9]

 五:元字符：即特殊字符（除数字，字母，下划线）
    例：/^\d{15}|\d{18}$/
    理解：^表示字符串开始; $表示字符串结束;
          \d{15} 15个数字;
          | 或者
 六:原子分组：
     原子集合
 七:反向引用
  例：
 var reg=new RegExp("hdw123hdw","i")
 可写成：
 var reg=new RegExp("(hdw)123\\1","i"); 【\\1表示反向引用 （构造函数方式）】
 或：var reg=/^(hdw)123\1$/i;  【\1表示反向引用 （字面量方式）】

八:取消反向引用。
 (?: ) 取消之后不在内存中存储。

九：量词：可以使用一些元字符，重复表示一些元子或元字符。
 *   重复0次或更多次
 +   重复一次或更多次
 ?       0次或一次
 {n}     n次
 {n,}    n次或多次
 {n,m}   n到m次
十：贪婪变吝啬：
  量词后面加一个？【只匹配一次】
  *？ 重复任意次，但尽可能少重复
  +？ 重复一次或更多次，但尽可能少重复
  ？？
  等
十一：边界：
  1.字符边界：
     ^:字符串开始
     $:字符串结束
  2.单词边界：
     \b：一个单词的边界

十二：模式匹配的顺序：

  ()     模式单元
  ?*+{}  重复匹配
  ^$     边界限制
  |      模式选择


应用：
 1.数据验证 文本替换 内容检索 拆分 过滤

十三：
 